[{"D:\\projects\\spa\\social-network\\src\\index.tsx":"1","D:\\projects\\spa\\social-network\\src\\serviceWorker.js":"2","D:\\projects\\spa\\social-network\\src\\App.tsx":"3","D:\\projects\\spa\\social-network\\src\\redux\\redux-store.ts":"4","D:\\projects\\spa\\social-network\\src\\redux\\app-reducer.ts":"5","D:\\projects\\spa\\social-network\\src\\components\\Users\\UsersContainer.tsx":"6","D:\\projects\\spa\\social-network\\src\\components\\Dialogs\\DialogsContainer.tsx":"7","D:\\projects\\spa\\social-network\\src\\components\\Login\\Login.tsx":"8","D:\\projects\\spa\\social-network\\src\\redux\\profile-reducer.ts":"9","D:\\projects\\spa\\social-network\\src\\redux\\sidebar-reducer.ts":"10","D:\\projects\\spa\\social-network\\src\\redux\\dialogs-reducer.ts":"11","D:\\projects\\spa\\social-network\\src\\redux\\auth-reducer.ts":"12","D:\\projects\\spa\\social-network\\src\\redux\\users-reducer.ts":"13","D:\\projects\\spa\\social-network\\src\\redux\\users-selectors.ts":"14","D:\\projects\\spa\\social-network\\src\\components\\Dialogs\\Dialogs.tsx":"15","D:\\projects\\spa\\social-network\\src\\components\\Users\\Users.tsx":"16","D:\\projects\\spa\\social-network\\src\\components\\Header\\Header.tsx":"17","D:\\projects\\spa\\social-network\\src\\api\\auth-api.ts":"18","D:\\projects\\spa\\social-network\\src\\api\\security-api.ts":"19","D:\\projects\\spa\\social-network\\src\\api\\api.ts":"20","D:\\projects\\spa\\social-network\\src\\api\\profile-api.ts":"21","D:\\projects\\spa\\social-network\\src\\api\\users-api.ts":"22","D:\\projects\\spa\\social-network\\src\\components\\Users\\User.tsx":"23","D:\\projects\\spa\\social-network\\src\\components\\Common\\Paginator\\Paginator.tsx":"24","D:\\projects\\spa\\social-network\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.tsx":"25","D:\\projects\\spa\\social-network\\src\\components\\Dialogs\\Message\\Message.tsx":"26","D:\\projects\\spa\\social-network\\src\\components\\Dialogs\\AddMessageForm\\AddMessageForm.tsx":"27","D:\\projects\\spa\\social-network\\src\\components\\Common\\Preloader\\Preloader.tsx":"28","D:\\projects\\spa\\social-network\\src\\utils\\validators\\validators.ts":"29","D:\\projects\\spa\\social-network\\src\\components\\Common\\FormsControls\\FormsControls.tsx":"30","D:\\projects\\spa\\social-network\\src\\hoc\\withSuspense.tsx":"31","D:\\projects\\spa\\social-network\\src\\components\\Profile\\ProfileContainer.tsx":"32","D:\\projects\\spa\\social-network\\src\\components\\Navbar\\Navbar.tsx":"33","D:\\projects\\spa\\social-network\\src\\components\\Header\\HeaderContainer.tsx":"34","D:\\projects\\spa\\social-network\\src\\hoc\\withAuthRedirect.tsx":"35","D:\\projects\\spa\\social-network\\src\\components\\Profile\\Profile.tsx":"36","D:\\projects\\spa\\social-network\\src\\utils\\object-helpers.ts":"37","D:\\projects\\spa\\social-network\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx":"38","D:\\projects\\spa\\social-network\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"39","D:\\projects\\spa\\social-network\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"40","D:\\projects\\spa\\social-network\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"41","D:\\projects\\spa\\social-network\\src\\components\\Profile\\ProfileInfo\\ProfileDataForm.tsx":"42","D:\\projects\\spa\\social-network\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx":"43","D:\\projects\\spa\\social-network\\src\\components\\Profile\\MyPosts\\AddNewPostForm\\AddNewPostForm.tsx":"44"},{"size":481,"mtime":1629189726675,"results":"45","hashOfConfig":"46"},{"size":5140,"mtime":1629189726675,"results":"47","hashOfConfig":"46"},{"size":2870,"mtime":1629195756101,"results":"48","hashOfConfig":"46"},{"size":1347,"mtime":1629195756208,"results":"49","hashOfConfig":"46"},{"size":944,"mtime":1629195756105,"results":"50","hashOfConfig":"46"},{"size":2712,"mtime":1629195756161,"results":"51","hashOfConfig":"46"},{"size":546,"mtime":1629195756129,"results":"52","hashOfConfig":"46"},{"size":2490,"mtime":1629198010609,"results":"53","hashOfConfig":"46"},{"size":3831,"mtime":1629195756192,"results":"54","hashOfConfig":"46"},{"size":189,"mtime":1629195756057,"results":"55","hashOfConfig":"46"},{"size":1358,"mtime":1629193314334,"results":"56","hashOfConfig":"46"},{"size":2904,"mtime":1629193285987,"results":"57","hashOfConfig":"46"},{"size":4239,"mtime":1629195756053,"results":"58","hashOfConfig":"46"},{"size":845,"mtime":1629195756172,"results":"59","hashOfConfig":"46"},{"size":1360,"mtime":1629195756125,"results":"60","hashOfConfig":"46"},{"size":1224,"mtime":1629195756141,"results":"61","hashOfConfig":"46"},{"size":735,"mtime":1629195756212,"results":"62","hashOfConfig":"46"},{"size":710,"mtime":1629195756133,"results":"63","hashOfConfig":"46"},{"size":248,"mtime":1629195756184,"results":"64","hashOfConfig":"46"},{"size":630,"mtime":1629195756196,"results":"65","hashOfConfig":"46"},{"size":999,"mtime":1629195756073,"results":"66","hashOfConfig":"46"},{"size":501,"mtime":1629195756216,"results":"67","hashOfConfig":"46"},{"size":1850,"mtime":1629198165718,"results":"68","hashOfConfig":"46"},{"size":1822,"mtime":1629195756121,"results":"69","hashOfConfig":"46"},{"size":1229,"mtime":1629195756168,"results":"70","hashOfConfig":"46"},{"size":257,"mtime":1629195756069,"results":"71","hashOfConfig":"46"},{"size":1139,"mtime":1629195756109,"results":"72","hashOfConfig":"46"},{"size":224,"mtime":1629195756196,"results":"73","hashOfConfig":"46"},{"size":401,"mtime":1629195756200,"results":"74","hashOfConfig":"46"},{"size":1713,"mtime":1629195756137,"results":"75","hashOfConfig":"46"},{"size":289,"mtime":1629194697147,"results":"76","hashOfConfig":"46"},{"size":2776,"mtime":1629195756165,"results":"77","hashOfConfig":"46"},{"size":987,"mtime":1629198738215,"results":"78","hashOfConfig":"46"},{"size":646,"mtime":1629195756117,"results":"79","hashOfConfig":"46"},{"size":921,"mtime":1629195756176,"results":"80","hashOfConfig":"46"},{"size":918,"mtime":1629195756145,"results":"81","hashOfConfig":"46"},{"size":267,"mtime":1629195756061,"results":"82","hashOfConfig":"46"},{"size":424,"mtime":1629195756057,"results":"83","hashOfConfig":"46"},{"size":3234,"mtime":1629195811409,"results":"84","hashOfConfig":"46"},{"size":567,"mtime":1629195756168,"results":"85","hashOfConfig":"46"},{"size":1197,"mtime":1629198295615,"results":"86","hashOfConfig":"46"},{"size":1930,"mtime":1629198045589,"results":"87","hashOfConfig":"46"},{"size":525,"mtime":1629198879904,"results":"88","hashOfConfig":"46"},{"size":947,"mtime":1629198101774,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"6tpjjr",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"99"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"99"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"99"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"99"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"99"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"99"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"99"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"99"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"99"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"99"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"99"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"99"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"99"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"193"},"D:\\projects\\spa\\social-network\\src\\index.tsx",[],["194","195"],"D:\\projects\\spa\\social-network\\src\\serviceWorker.js",[],"D:\\projects\\spa\\social-network\\src\\App.tsx",[],"D:\\projects\\spa\\social-network\\src\\redux\\redux-store.ts",[],["196","197"],"D:\\projects\\spa\\social-network\\src\\redux\\app-reducer.ts",[],"D:\\projects\\spa\\social-network\\src\\components\\Users\\UsersContainer.tsx",[],"D:\\projects\\spa\\social-network\\src\\components\\Dialogs\\DialogsContainer.tsx",["198"],"import React from 'react';\r\nimport {actions} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions}),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n","D:\\projects\\spa\\social-network\\src\\components\\Login\\Login.tsx",["199","200"],"import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport style from \"./../Common/FormsControls/FormsControls.module.css\"\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport { createField, GetStringKeys, Input } from '../Common/FormsControls/FormsControls';\r\n\r\ntype LoginFormOwnProps = {\r\n\tcaptchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps>\r\n\t= ({handleSubmit, error, captchaUrl}) => {\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t{createField<LoginFormValuesTypeKeys>(\"Email\", 'email', [required], Input)}\r\n\t\t\t{createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n\t\t\t{createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n\r\n\t\t\t{ captchaUrl && <img src={captchaUrl} />}\r\n\t\t\t{ captchaUrl &&  createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", [required], Input, {}) }\r\n\r\n\r\n\t\t\t{error && <div className={style.formSummaryError}>\r\n\t\t\t\t{error}\r\n\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t<div>\r\n\t\t\t\t<button>Login</button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\n\r\ntype MapStatePropsType = {\r\n\tcaptchaUrl: string | null\r\n\tisAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n\tlogin: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n\tcaptcha: string\r\n\trememberMe: boolean\r\n\tpassword: string\r\n\temail: string\r\n}\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\tconst onSubmit = (formData: LoginFormValuesType) => {\r\n\t\tprops.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n\t}\r\n\r\n\tif (props.isAuth) {\r\n\t\treturn <Redirect to={\"/profile\"}/>\r\n\t}\r\n\r\n\treturn <div>\r\n\t\t<h1>Login</h1>\r\n\t\t<LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n\t</div>\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n\tcaptchaUrl: state.auth.captchaUrl,\r\n\tisAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);\r\n","D:\\projects\\spa\\social-network\\src\\redux\\profile-reducer.ts",[],"D:\\projects\\spa\\social-network\\src\\redux\\sidebar-reducer.ts",[],"D:\\projects\\spa\\social-network\\src\\redux\\dialogs-reducer.ts",[],"D:\\projects\\spa\\social-network\\src\\redux\\auth-reducer.ts",["201"],"import {ResultCodeForCapcthaEnum, ResultCodesEnum} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {authAPI} from '../api/auth-api';\r\nimport {securityAPI} from '../api/security-api';\r\nimport {BaseThunkType, InferActionsTypes} from './redux-store';\r\nimport {Action} from 'redux';\r\nimport {FormAction} from 'redux-form/lib/actions';\r\n\r\nlet initialState = {\r\n    userId: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null// if null, then captcha is not required\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/auth/SET_USER_DATA':\r\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\r\n    } as const)\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me()\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        let {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        // success, get auth data\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (data.resultCode === ResultCodeForCapcthaEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = data.url\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch: any) => {\r\n    let response = await authAPI.logout()\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","D:\\projects\\spa\\social-network\\src\\redux\\users-reducer.ts",[],"D:\\projects\\spa\\social-network\\src\\redux\\users-selectors.ts",[],"D:\\projects\\spa\\social-network\\src\\components\\Dialogs\\Dialogs.tsx",[],"D:\\projects\\spa\\social-network\\src\\components\\Users\\Users.tsx",[],"D:\\projects\\spa\\social-network\\src\\components\\Header\\Header.tsx",["202"],"import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type MapPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\nexport type DispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    return <header className={s.header}>\r\n        <img src='https://www.freelogodesign.org/Content/img/logo-ex-7.png' />\r\n\r\n        <div className={s.loginBlock}>\r\n            { props.isAuth\r\n                ? <div>{props.login} - <button onClick={props.logout}>Log out</button> </div>\r\n                : <NavLink to={'/login'}>Login</NavLink> }\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;\r\n","D:\\projects\\spa\\social-network\\src\\api\\auth-api.ts",[],"D:\\projects\\spa\\social-network\\src\\api\\security-api.ts",[],"D:\\projects\\spa\\social-network\\src\\api\\api.ts",[],"D:\\projects\\spa\\social-network\\src\\api\\profile-api.ts",[],"D:\\projects\\spa\\social-network\\src\\api\\users-api.ts",[],"D:\\projects\\spa\\social-network\\src\\components\\Users\\User.tsx",["203"],"import React from 'react';\r\nimport styles from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.jpg\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from '../../types/types';\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nlet User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n        <div>\r\n                <span>\r\n                    <div>\r\n                       <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                             className={styles.userPhoto}/>\r\n                       </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed\r\n                            ? <button disabled={followingInProgress\r\n                                .some(id => id === user.id)}\r\n                                      onClick={() => { unfollow(user.id) }}>\r\n                                Unfollow</button>\r\n                            : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                      onClick={() => { follow(user.id) }}>\r\n                                Follow</button>}\r\n\r\n                    </div>\r\n                </span>\r\n            <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"user.location.country\"}</div>\r\n                        <div>{\"user.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n        </div>)\r\n}\r\n\r\nexport default User;\r\n","D:\\projects\\spa\\social-network\\src\\components\\Common\\Paginator\\Paginator.tsx",[],"D:\\projects\\spa\\social-network\\src\\components\\Profile\\ProfileInfo\\ProfileStatus.tsx",[],"D:\\projects\\spa\\social-network\\src\\components\\Dialogs\\Message\\Message.tsx",[],"D:\\projects\\spa\\social-network\\src\\components\\Dialogs\\AddMessageForm\\AddMessageForm.tsx",[],"D:\\projects\\spa\\social-network\\src\\components\\Common\\Preloader\\Preloader.tsx",["204"],"import preloader from '../../../assets/images/preloader.gif';\r\nimport React from 'react';\r\n\r\nconst Preloader: React.FC = () => {\r\n    return <div>\r\n        <img src={preloader} />\r\n    </div>\r\n};\r\n\r\nexport default Preloader;","D:\\projects\\spa\\social-network\\src\\utils\\validators\\validators.ts",[],"D:\\projects\\spa\\social-network\\src\\components\\Common\\FormsControls\\FormsControls.tsx",["205"],"import React from \"react\"\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\"\r\nimport {Field, WrappedFieldProps} from \"redux-form\"\r\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\r\nimport {LoginFormValuesType} from '../../Login/Login';\r\n\r\ntype FormControlPropsType = {\r\n\tmeta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n\tconst hasError = touched && error;\r\n\treturn (\r\n\t\t<div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n\t\t\t<div>\r\n\t\t\t\t{children}\r\n\t\t\t</div>\r\n\t\t\t{hasError && <span>{error}</span>}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n\t//const {input, meta, child, ...restProps} = props;\r\n\tconst {input, meta, ...restProps} = props;\r\n\treturn <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n\t//const {input, meta, child, ...restProps} = props;\r\n\tconst {input, meta, ...restProps} = props;\r\n\treturn <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t name: FormKeysType,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t validators: Array<FieldValidatorType>,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t component: React.FC<WrappedFieldProps>,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t props = {}, text = \"\") {\r\n\treturn <div>\r\n\t\t<Field placeholder={placeholder} name={name}\r\n\t\t\t   validate={validators}\r\n\t\t\t   component={component}\r\n\t\t\t   {...props}\r\n\t\t/> {text}\r\n\t</div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n","D:\\projects\\spa\\social-network\\src\\hoc\\withSuspense.tsx",[],"D:\\projects\\spa\\social-network\\src\\components\\Profile\\ProfileContainer.tsx",["206","207"],"import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {ProfileType} from '../../types/types';\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n    type DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n        getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n    }\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                // todo: may be replace push with Redirect??\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    //console.log('mapStateToProps PROFILE')\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    })\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n        withRouter\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n\r\n","D:\\projects\\spa\\social-network\\src\\components\\Navbar\\Navbar.tsx",["208","209","210"],"import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar: React.FC = () => {\r\n    return (\r\n        <nav className={s.navbar}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n\r\n            <div className={s.item}>\r\n                <a>News</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>Music</a>\r\n            </div>\r\n            <div className={s.item}>\r\n                <a>Settings</a>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","D:\\projects\\spa\\social-network\\src\\components\\Header\\HeaderContainer.tsx",[],"D:\\projects\\spa\\social-network\\src\\hoc\\withAuthRedirect.tsx",[],"D:\\projects\\spa\\social-network\\src\\components\\Profile\\Profile.tsx",[],"D:\\projects\\spa\\social-network\\src\\utils\\object-helpers.ts",[],"D:\\projects\\spa\\social-network\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx",[],"D:\\projects\\spa\\social-network\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["211"],"import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatusWithHooks from \"./ProfileStatus\";\r\nimport userPhoto from \"../../../assets/images/user.jpg\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from '../../../types/types';\r\nimport Preloader from '../../Common/Preloader/Preloader';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n        isOwner: boolean\r\nsavePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        // todo: remove then\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n\r\n                { editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {setEditMode(true)} } profile={profile} isOwner={isOwner}/> }\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {\r\n            Object\r\n                .keys(profile.contacts)\r\n                .map((key)  => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;\r\n","D:\\projects\\spa\\social-network\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",["212"],"import React from 'react';\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from '../../../redux/redux-store';\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    addPost: actions.addPostActionCreator\r\n})(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","D:\\projects\\spa\\social-network\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",["213","214","215","216"],"import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport AddPostForm, {AddPostFormValuesType} from './AddNewPostForm/AddNewPostForm';\r\nimport {PostType} from '../../../types/types';\r\n\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let onAddPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts);\r\n\r\nexport default MyPostsMemorized;\r\n","D:\\projects\\spa\\social-network\\src\\components\\Profile\\ProfileInfo\\ProfileDataForm.tsx",[],"D:\\projects\\spa\\social-network\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx",["217"],"import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://avatars.mds.yandex.net/get-pdb/1767376/0de9f39a-c664-4469-847a-df2c22b1cc16/s1200' />\r\n            { props.message }\r\n            <div>\r\n                <span>like</span> { props.likesCount }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n","D:\\projects\\spa\\social-network\\src\\components\\Profile\\MyPosts\\AddNewPostForm\\AddNewPostForm.tsx",[],["218","219"],{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","replacedBy":"223"},{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","severity":1,"message":"225","line":1,"column":8,"nodeType":"226","messageId":"227","endLine":1,"endColumn":13},{"ruleId":"224","severity":1,"message":"228","line":2,"column":9,"nodeType":"226","messageId":"227","endLine":2,"endColumn":14},{"ruleId":"229","severity":1,"message":"230","line":23,"column":20,"nodeType":"231","endLine":23,"endColumn":44},{"ruleId":"224","severity":1,"message":"232","line":6,"column":9,"nodeType":"226","messageId":"227","endLine":6,"endColumn":15},{"ruleId":"229","severity":1,"message":"230","line":13,"column":9,"nodeType":"231","endLine":14,"endColumn":137},{"ruleId":"229","severity":1,"message":"230","line":20,"column":25,"nodeType":"231","endLine":21,"endColumn":60},{"ruleId":"229","severity":1,"message":"230","line":6,"column":9,"nodeType":"231","endLine":6,"endColumn":32},{"ruleId":"224","severity":1,"message":"233","line":6,"column":9,"nodeType":"226","messageId":"227","endLine":6,"endColumn":28},{"ruleId":"234","severity":1,"message":"235","line":26,"column":5,"nodeType":"236","messageId":"237","endLine":28,"endColumn":6},{"ruleId":"238","severity":1,"message":"239","line":53,"column":44,"nodeType":"240","messageId":"241","endLine":53,"endColumn":46},{"ruleId":"242","severity":1,"message":"243","line":19,"column":17,"nodeType":"231","endLine":19,"endColumn":20},{"ruleId":"242","severity":1,"message":"243","line":22,"column":17,"nodeType":"231","endLine":22,"endColumn":20},{"ruleId":"242","severity":1,"message":"243","line":25,"column":17,"nodeType":"231","endLine":25,"endColumn":20},{"ruleId":"229","severity":1,"message":"230","line":44,"column":17,"nodeType":"231","endLine":44,"endColumn":87},{"ruleId":"224","severity":1,"message":"225","line":1,"column":8,"nodeType":"226","messageId":"227","endLine":1,"endColumn":13},{"ruleId":"224","severity":1,"message":"228","line":4,"column":9,"nodeType":"226","messageId":"227","endLine":4,"endColumn":14},{"ruleId":"224","severity":1,"message":"244","line":4,"column":16,"nodeType":"226","messageId":"227","endLine":4,"endColumn":25},{"ruleId":"224","severity":1,"message":"245","line":5,"column":9,"nodeType":"226","messageId":"227","endLine":5,"endColumn":25},{"ruleId":"224","severity":1,"message":"246","line":5,"column":27,"nodeType":"226","messageId":"227","endLine":5,"endColumn":35},{"ruleId":"229","severity":1,"message":"230","line":12,"column":13,"nodeType":"231","endLine":12,"endColumn":116},{"ruleId":"220","replacedBy":"247"},{"ruleId":"222","replacedBy":"248"},"no-native-reassign",["249"],"no-negated-in-lhs",["250"],"@typescript-eslint/no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'Field' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Action' is defined but never used.","'LoginFormValuesType' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'reduxForm' is defined but never used.","'maxLengthCreator' is defined but never used.","'required' is defined but never used.",["249"],["250"],"no-global-assign","no-unsafe-negation"]