{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","target","files","length","initialValues","formData","then","ProfileStatus","Post","item","message","likesCount","required","MyPosts","postsElements","posts","reverse","p","id","postsBlock","values","addPost","newPostText","MyPostsMemorized","React","memo","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.2ce6fb83.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2KR89\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2nJ02\",\"contact\":\"ProfileInfo_contact__1tuM7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__38GY0\",\"posts\":\"MyPosts_posts__2SlW4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3xWlz\"};","import React, {useState, useEffect, ChangeEvent} from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status: </b> <span onDoubleClick={activateEditMode}>{props.status || \"-------\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../../Common/FormsControls/FormsControls.module.css\"\r\nimport {ProfileType} from '../../../types/types';\r\nimport { createField, GetStringKeys, Input, Textarea } from \"../../Common/FormsControls/FormsControls\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>save</button></div>\r\n        {error && <div className={style.formSummaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Full name</b>: {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: { createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"} )}\r\n        </div>\r\n\r\n        <div>\r\n            <b>My professional skills</b>:\r\n            { createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea  )}\r\n        </div>\r\n\r\n\r\n        <div>\r\n            <b>About me</b>:\r\n            { createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea  )}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n                {/* todo: create some solution for embedded objects */}\r\n                <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatusWithHooks from \"./ProfileStatus\";\r\nimport userPhoto from \"../../../assets/images/user.jpg\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from '../../../types/types';\r\nimport Preloader from '../../Common/Preloader/Preloader';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n        isOwner: boolean\r\nsavePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        // todo: remove then\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n\r\n                { editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {setEditMode(true)} } profile={profile} isOwner={isOwner}/> }\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {\r\n            Object\r\n                .keys(profile.contacts)\r\n                .map((key)  => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://avatars.mds.yandex.net/get-pdb/1767376/0de9f39a-c664-4469-847a-df2c22b1cc16/s1200' />\r\n            { props.message }\r\n            <div>\r\n                <span>like</span> { props.likesCount }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input} from '../../../Common/FormsControls/FormsControls';\r\nimport {required} from '../../../../utils/validators/validators';\r\n\r\ntype PropsType = {\r\n\r\n}\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                { createField<AddPostFormValuesTypeKeys>(\"Your post\", 'newPostText', [required], Input) }\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: 'profile-add-post'})(AddPostForm)\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport AddPostForm, {AddPostFormValuesType} from './AddNewPostForm/AddNewPostForm';\r\nimport {PostType} from '../../../types/types';\r\n\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let onAddPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts);\r\n\r\nexport default MyPostsMemorized;\r\n","import React from 'react';\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from '../../../redux/redux-store';\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    addPost: actions.addPostActionCreator\r\n})(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from '../../types/types';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n        isOwner: boolean\r\nsavePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile:React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {ProfileType} from '../../types/types';\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n    type DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n        getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n    }\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                // todo: may be replace push with Redirect??\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    //console.log('mapStateToProps PROFILE')\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    })\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n        withRouter\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}