{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/My posts/Post/Post.module.css","components/Profile/My posts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/My posts/Post/Post.jsx","components/Profile/My posts/AddNewPostForm/AddNewPostForm.js","components/Profile/My posts/MyPosts.jsx","components/Profile/My posts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatus","state","editMode","status","props","activateEditMode","setState","deactivateEditMode","updateStatusTC","onStatusChange","e","currentTarget","value","prevProps","prevState","this","onChange","autoFocus","onBlur","onDoubleClick","React","Component","ProfileInfo","profile","className","classes","descriptionBlock","src","photos","large","Preloader","Post","item","alt","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","validate","requiredField","placeholder","MyPosts","memo","postsElements","posts","map","p","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfileTC","getStatusTC","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.75bf6bdc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3DMFc\",\"background\":\"ProfileInfo_background__1qJ9r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__otlk_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3R9k2\",\"posts\":\"MyPosts_posts__1TuPc\"};","import React from 'react';\r\n\r\n\r\nclass ProfileStatus extends React.Component {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    };\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateStatusTC(this.state.status)\r\n    };\r\n\r\n    onStatusChange = (e) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode ?\r\n                    <div>\r\n                        <span onDoubleClick={this.activateEditMode}>{this.props.status || \"-----\"}</span>\r\n                    </div>\r\n                    : <div>\r\n                        <input onChange={this.onStatusChange} autoFocus={true}\r\n                               onBlur={this.deactivateEditMode}\r\n                               value={this.state.status}/>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\nimport Preloader from \"../../Common/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\n\r\n\r\nconst ProfileInfo = ({profile, status, updateStatusTC}) => {\r\n    if(!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return <div>\r\n        <div className={classes.descriptionBlock}>\r\n            <img src={profile.photos.large} />\r\n            <ProfileStatus status={status}\r\n                           updateStatusTC={updateStatusTC}/>\r\n        </div>\r\n    </div>\r\n};\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport classes from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n            <div className={classes.item}>\r\n                <img src=\"https://avatars.mds.yandex.net/get-pdb/1767376/0de9f39a-c664-4469-847a-df2c22b1cc16/s1200\" alt=\"\"/>\r\n                { props.message }\r\n                <div>\r\n                <span>like</span> {props.likesCount}\r\n                </div>\r\n            </div>\r\n    )};\r\nexport default Post;","import {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../../Common/Forms/Forms\";\r\nimport {maxLengthCreator, requiredField} from \"../../../../utils/validators/validator\";\r\nimport React from \"react\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddNewPostForm = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newPostText\" component={Textarea}\r\n                       validate={[requiredField, maxLength10]}\r\n                       placeholder={\"Post message\"}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )};\r\n\r\nexport const AddNewPostFormRedux = reduxForm({\r\n    form: \"profileAddNewPostForm\"})\r\n(AddNewPostForm);","import React from 'react';\r\nimport Post from \"./Post/Post\";\r\nimport classes from \"./MyPosts.module.css\"\r\nimport {AddNewPostFormRedux} from \"./AddNewPostForm/AddNewPostForm\";\r\n\r\nconst MyPosts = React.memo(props => {\r\n\r\n    /*shouldComponentUpdate(nextProps, nextState) {\r\n        return nextProps != this.props || nextState != this.state;\r\n    }*/\r\n\r\n    let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\nimport {addPostAC} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText,\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostAC(newPostText));\r\n        },\r\n    }\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./My posts/MyPostsContainer\";\r\n\r\nconst Profile = ({profile, status, updateStatusTC}) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile} status={status}\r\n                         updateStatusTC={updateStatusTC}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatusTC, getUserProfileTC, updateStatusTC} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if(!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfileTC(userId);\r\n        this.props.getStatusTC(userId)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         profile={this.props.profile}\r\n                status={this.props.status}\r\n                         updateStatusTC={this.props.updateStatusTC}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfileTC, getStatusTC, updateStatusTC}),\r\n    withRouter,\r\n)(ProfileContainer);\r\n\r\n\r\n"],"sourceRoot":""}